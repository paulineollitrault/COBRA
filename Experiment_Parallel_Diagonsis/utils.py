import numpy as np
import itertools
from qiskit.chemistry import FermionicOperator
from fermionic_operator_nbody import FermionicOperatorNBody

def delta(p,r):
    if(p==r): return 1
    return 0

def commutator_adj_nor(n,Emu,Enu):
    hs  = [None]*4
    idx = [None]*4
    if(len(Emu)==2 and len(Enu)==2):
       hs[0]  = np.zeros(tuple([n]*2))
       idx[0] = []
       a,i    = Emu
       b,j    = Enu
       hs[0][i,j] =  delta(a,b); idx[0] += [(i,j)]
       hs[0][b,a] = -delta(i,j); idx[0] += [(b,a)]
    if(len(Emu)==2 and len(Enu)==4):
       hs[1]   = np.zeros(tuple([n]*4))
       idx[1]  = []
       a,i     = Emu
       b,c,j,k = Enu
       hs[1][c,i,j,k] =  1 * delta(a,b); idx[1] += [(c,i,j,k)]
       hs[1][b,i,j,k] =  1 * delta(a,c); idx[1] += [(b,i,j,k)] 
       hs[1][b,c,a,k] = -1 * delta(j,i); idx[1] += [(b,c,a,k)] 
       hs[1][b,c,a,j] = -1 * delta(k,i); idx[1] += [(b,c,a,j)] 
    if(len(Emu)==4 and len(Enu)==4):
       hs[2]   = np.zeros(tuple([n]*6))
       idx[2]  = []
       a,b,j,i = Emu
       c,d,k,l = Enu
       hs[2][d,i,j,a,k,l] =  1 * delta(b,c); idx[2] += [(d,i,j,a,k,l)]
       hs[2][c,i,j,a,k,l] =  1 * delta(b,d); idx[2] += [(c,i,j,a,k,l)]
       hs[2][d,i,j,b,k,l] =  1 * delta(a,c); idx[2] += [(d,i,j,b,k,l)]
       hs[2][c,i,j,b,k,l] =  1 * delta(a,d); idx[2] += [(c,i,j,b,k,l)]
       hs[2][c,d,i,a,b,l] = -1 * delta(k,j); idx[2] += [(c,d,i,a,b,l)]
       hs[2][c,d,j,a,b,l] = -1 * delta(k,i); idx[2] += [(c,d,j,a,b,l)]
       hs[2][c,d,i,a,b,k] = -1 * delta(l,j); idx[2] += [(c,d,i,a,b,k)]
       hs[2][c,d,j,a,b,k] = -1 * delta(l,i); idx[2] += [(c,d,j,a,b,k)]
    return FermionicOperatorNBody(hs),idx

# =====

def triple_commutator_adj_onebody_nor(n,Emu,Enu,H):
    hs  = [None]*4
    idx = [None]*4
    if(len(Emu)==2 and len(Enu)==2):
       hs[0]  = np.zeros(tuple([n]*2))
       idx[0] = []
       a,i = Emu
       b,j = Enu
       hs[0][i,j] =  2 * H[a,b];              idx[0] += [(i,j)]
       hs[0][b,:] = -1 * H[a,:] * delta(j,i); idx[0] += [(b,x) for x in range(n)]
       hs[0][:,j] = -1 * H[:,i] * delta(a,b); idx[0] += [(x,j) for x in range(n)]
       hs[0][b,a] =  2 * H[j,i];              idx[0] += [(b,a)]
       hs[0][:,a] = -1 * H[:,b] * delta(j,i); idx[0] += [(x,a) for x in range(n)]
       hs[0][i,:] = -1 * H[j,:] * delta(a,b); idx[0] += [(i,x) for x in range(n)]
    if(len(Emu)==2 and len(Enu)==4):
       hs[1]   = np.zeros(tuple([n]*4))
       idx[1]  = []
       a,i     = Emu
       b,c,j,k = Enu
       hs[1][c,i,j,k] =  2 * H[a,b];              idx[1] += [(c,i,j,k)]
       hs[1][b,i,j,k] =  2 * H[a,c];              idx[1] += [(b,i,j,k)]
       hs[1][b,c,k,:] = -1 * H[a,:] * delta(j,i); idx[1] += [(b,c,k,x) for x in range(n)]
       hs[1][b,c,j,:] = -1 * H[a,:] * delta(k,i); idx[1] += [(b,c,j,x) for x in range(n)]
       hs[1][c,:,j,k] = -1 * H[:,i] * delta(a,b); idx[1] += [(c,x,j,k) for x in range(n)]
       hs[1][b,:,j,k] = -1 * H[:,i] * delta(a,c); idx[1] += [(b,x,j,k) for x in range(n)]
       hs[1][b,c,a,k] =  2 * H[j,i];              idx[1] += [(b,c,a,k)]
       hs[1][b,c,a,j] =  2 * H[k,i];              idx[1] += [(b,c,a,j)]
       hs[1][i,:,j,k] =  1 * H[:,b] * delta(a,c); idx[1] += [(i,x,j,k) for x in range(n)]
       hs[1][c,:,a,k] = -1 * H[:,b] * delta(j,i); idx[1] += [(c,x,a,k) for x in range(n)]
       hs[1][c,:,a,j] = -1 * H[:,b] * delta(k,i); idx[1] += [(c,x,a,j) for x in range(n)]
       hs[1][i,:,j,k] =  1 * H[:,c] * delta(a,b); idx[1] += [(i,x,j,k) for x in range(n)]
       hs[1][b,:,a,k] = -1 * H[:,c] * delta(j,i); idx[1] += [(b,x,a,k) for x in range(n)]
       hs[1][b,:,a,j] = -1 * H[:,c] * delta(k,i); idx[1] += [(b,x,a,j) for x in range(n)]
       hs[1][c,i,k,:] = -1 * H[j,:] * delta(a,b); idx[1] += [(c,i,k,x) for x in range(n)]
       hs[1][b,i,k,:] = -1 * H[j,:] * delta(a,c); idx[1] += [(b,i,k,x) for x in range(n)]
       hs[1][b,c,a,:] =  1 * H[j,:] * delta(k,i); idx[1] += [(b,c,a,x) for x in range(n)]
       hs[1][c,i,j,:] = -1 * H[k,:] * delta(a,b); idx[1] += [(c,i,j,x) for x in range(n)]
       hs[1][b,i,j,:] = -1 * H[k,:] * delta(a,c); idx[1] += [(b,i,j,x) for x in range(n)]
       hs[1][b,c,a,:] =  1 * H[k,:] * delta(j,i); idx[1] += [(b,c,a,x) for x in range(n)]
    if(len(Emu)==4 and len(Enu)==4):
       hs[2]   = np.zeros(tuple([n]*6))
       idx[2]  = []
       a,b,j,i = Emu
       c,d,k,l = Enu
       hs[2][d,i,j,k,l,:] =  1 * H[b,:] * delta(a,c); idx[2] += [(d,i,j,k,l,x) for x in range(n)]
       hs[2][c,i,j,k,l,:] =  1 * H[b,:] * delta(a,d); idx[2] += [(c,i,j,k,l,x) for x in range(n)]
       hs[2][d,i,j,a,k,l] =  2 * H[b,c];              idx[2] += [(d,i,j,a,k,l)]
       hs[2][c,i,j,a,k,l] =  2 * H[b,d];              idx[2] += [(c,i,j,a,k,l)]
       hs[2][c,d,j,a,l,:] = -1 * H[b,:] * delta(k,i); idx[2] += [(c,d,j,a,l,x) for x in range(n)]
       hs[2][c,d,i,a,l,:] = -1 * H[b,:] * delta(k,j); idx[2] += [(c,d,i,a,l,x) for x in range(n)]
       hs[2][c,d,j,a,k,:] = -1 * H[b,:] * delta(l,i); idx[2] += [(c,d,j,a,k,x) for x in range(n)]
       hs[2][c,d,i,a,k,:] = -1 * H[b,:] * delta(l,j); idx[2] += [(c,d,i,a,k,x) for x in range(n)]
       hs[2][d,i,j,k,l,:] =  1 * H[a,:] * delta(b,c); idx[2] += [(d,i,j,k,l,x) for x in range(n)]
       hs[2][c,i,j,k,l,:] =  1 * H[a,:] * delta(b,d); idx[2] += [(c,i,j,k,l,x) for x in range(n)]
       hs[2][d,i,j,b,k,l] =  2 * H[a,c];              idx[2] += [(d,i,j,b,k,l)]
       hs[2][c,i,j,b,k,l] =  2 * H[a,d];              idx[2] += [(c,i,j,b,k,l)]
       hs[2][c,d,j,b,l,:] = -1 * H[a,:] * delta(k,i); idx[2] += [(c,d,j,b,l,x) for x in range(n)]
       hs[2][c,d,i,b,l,:] = -1 * H[a,:] * delta(k,j); idx[2] += [(c,d,i,b,l,x) for x in range(n)]
       hs[2][c,d,j,b,k,:] = -1 * H[a,:] * delta(l,i); idx[2] += [(c,d,j,b,k,x) for x in range(n)]
       hs[2][c,d,i,b,k,:] = -1 * H[a,:] * delta(l,j); idx[2] += [(c,d,i,b,k,x) for x in range(n)]
       hs[2][d,i,:,b,k,l] = -1 * H[:,j] * delta(a,c); idx[2] += [(d,i,x,b,k,l) for x in range(n)]
       hs[2][c,i,:,b,k,l] = -1 * H[:,j] * delta(a,d); idx[2] += [(c,i,x,b,k,l) for x in range(n)]
       hs[2][d,i,:,a,k,l] = -1 * H[:,j] * delta(b,c); idx[2] += [(d,i,x,a,k,l) for x in range(n)]
       hs[2][c,i,:,a,k,l] = -1 * H[:,j] * delta(b,d); idx[2] += [(c,i,x,a,k,l) for x in range(n)]
       hs[2][c,d,:,a,b,l] =  1 * H[:,j] * delta(k,i); idx[2] += [(c,d,x,a,b,l) for x in range(n)]
       hs[2][c,d,i,a,b,l] =  2 * H[k,j];              idx[2] += [(c,d,i,a,b,l)]
       hs[2][c,d,:,a,b,k] =  1 * H[:,j] * delta(l,i); idx[2] += [(c,d,x,a,b,k) for x in range(n)]
       hs[2][c,d,i,a,b,k] =  2 * H[l,j] ;             idx[2] += [(c,d,i,a,b,k)]
       hs[2][d,j,:,b,k,l] = -1 * H[:,i] * delta(a,c); idx[2] += [(d,j,x,b,k,l) for x in range(n)]
       hs[2][c,j,:,b,k,l] = -1 * H[:,i] * delta(a,d); idx[2] += [(c,j,x,b,k,l) for x in range(n)]
       hs[2][d,j,:,a,k,l] = -1 * H[:,i] * delta(b,c); idx[2] += [(d,j,x,a,k,l) for x in range(n)]
       hs[2][c,j,:,a,k,l] = -1 * H[:,i] * delta(b,d); idx[2] += [(c,j,x,a,k,l) for x in range(n)]
       hs[2][c,d,:,a,b,l] =  1 * H[:,i] * delta(k,j); idx[2] += [(c,d,x,a,b,l) for x in range(n)]
       hs[2][c,d,j,a,b,l] =  2 * H[k,i] ;             idx[2] += [(c,d,j,a,b,l)]
       hs[2][c,d,:,a,b,k] =  1 * H[:,i] * delta(l,j); idx[2] += [(c,d,x,a,b,k) for x in range(n)]
       hs[2][c,d,j,a,b,k] =  2 * H[l,i] ;             idx[2] += [(c,d,j,a,b,k) for x in range(n)]
       hs[2][i,j,:,a,k,l] =  1 * H[:,c] * delta(b,d); idx[2] += [(i,j,x,a,k,l) for x in range(n)]
       hs[2][i,j,:,b,k,l] =  1 * H[:,c] * delta(a,d); idx[2] += [(i,j,x,b,k,l) for x in range(n)]
       hs[2][d,i,:,a,b,l] = -1 * H[:,c] * delta(k,j); idx[2] += [(d,i,x,a,b,l) for x in range(n)]
       hs[2][d,j,:,a,b,l] = -1 * H[:,c] * delta(k,i); idx[2] += [(d,j,x,a,b,l) for x in range(n)]
       hs[2][d,i,:,a,b,k] = -1 * H[:,c] * delta(l,j); idx[2] += [(d,i,x,a,b,k) for x in range(n)]
       hs[2][d,j,:,a,b,k] = -1 * H[:,c] * delta(l,i); idx[2] += [(d,j,x,a,b,k) for x in range(n)]
       hs[2][i,j,:,a,k,l] =  1 * H[:,d] * delta(b,c); idx[2] += [(i,j,x,a,k,l) for x in range(n)]
       hs[2][i,j,:,b,k,l] =  1 * H[:,d] * delta(a,c); idx[2] += [(i,j,x,b,k,l) for x in range(n)]
       hs[2][c,i,:,a,b,l] = -1 * H[:,d] * delta(k,j); idx[2] += [(c,i,x,a,b,l) for x in range(n)]
       hs[2][c,j,:,a,b,l] = -1 * H[:,d] * delta(k,i); idx[2] += [(c,j,x,a,b,l) for x in range(n)]
       hs[2][c,i,:,a,b,k] = -1 * H[:,d] * delta(l,j); idx[2] += [(c,i,x,a,b,k) for x in range(n)]
       hs[2][c,j,:,a,b,k] = -1 * H[:,d] * delta(l,i); idx[2] += [(c,j,x,a,b,k) for x in range(n)]
       hs[2][d,i,j,a,l,:] = -1 * H[k,:] * delta(b,c); idx[2] += [(d,i,j,a,l,x) for x in range(n)]
       hs[2][c,i,j,a,l,:] = -1 * H[k,:] * delta(b,d); idx[2] += [(c,i,j,a,l,x) for x in range(n)]
       hs[2][d,i,j,b,l,:] = -1 * H[k,:] * delta(a,c); idx[2] += [(d,i,j,b,l,x) for x in range(n)]
       hs[2][c,i,j,b,l,:] = -1 * H[k,:] * delta(a,d); idx[2] += [(c,i,j,b,l,x) for x in range(n)]
       hs[2][c,d,i,a,b,:] =  1 * H[k,:] * delta(l,j); idx[2] += [(c,d,i,a,b,x) for x in range(n)]
       hs[2][c,d,j,a,b,:] =  1 * H[k,:] * delta(l,i); idx[2] += [(c,d,j,a,b,x) for x in range(n)]
       hs[2][d,i,j,a,k,:] = -1 * H[l,:] * delta(b,c); idx[2] += [(d,i,j,a,k,x) for x in range(n)]
       hs[2][c,i,j,a,k,:] = -1 * H[l,:] * delta(b,d); idx[2] += [(c,i,j,a,k,x) for x in range(n)]
       hs[2][d,i,j,b,k,:] = -1 * H[l,:] * delta(a,c); idx[2] += [(d,i,j,b,k,x) for x in range(n)]
       hs[2][c,i,j,b,k,:] = -1 * H[l,:] * delta(a,d); idx[2] += [(c,i,j,b,k,x) for x in range(n)]
       hs[2][c,d,i,a,b,:] =  1 * H[l,:] * delta(k,j); idx[2] += [(c,d,i,a,b,x) for x in range(n)]
       hs[2][c,d,j,a,b,:] =  1 * H[l,:] * delta(k,i); idx[2] += [(c,d,j,a,b,x) for x in range(n)]
    return FermionicOperatorNBody(hs),idx

def triple_commutator_adj_onebody_adj(n,Emu,Enu,H):
    hs  = [None]*4
    idx = [None]*4
    if(len(Emu)==2 and len(Enu)==2):
       hs[0]  = np.zeros(tuple([n]*2))
       idx[0] = []
       a,i = Emu
       b,j = Enu
       hs[0][i,b] = 2 * H[a,j]; idx[0] += [(i,b)]
       hs[0][j,a] = 2 * H[b,i]; idx[0] += [(j,a)]
    if(len(Emu)==2 and len(Enu)==4):
       hs[1]   = np.zeros(tuple([n]*4))
       idx[1]  = []
       a,i     = Emu
       b,c,j,k = Enu
       hs[1][i,j,b,c] = 2 * H[a,k]; idx[1] += [(i,j,b,c)]
       hs[1][i,k,b,c] = 2 * H[a,j]; idx[1] += [(i,k,b,c)]
       hs[1][j,k,a,b] = 2 * H[c,i]; idx[1] += [(j,k,a,b)]
       hs[1][j,k,a,c] = 2 * H[b,i]; idx[1] += [(j,k,a,c)]
    if(len(Emu)==4 and len(Enu)==4):
       hs[2]   = np.zeros(tuple([n]*6))
       idx[2]  = []
       a,b,j,i = Emu
       c,d,k,l = Enu
       hs[2][a,b,d,j,k,l] = 2 * H[i,c]; idx[2] += [(a,b,d,j,k,l)]
       hs[2][a,b,c,j,k,l] = 2 * H[i,d]; idx[2] += [(a,b,c,j,k,l)]
       hs[2][a,b,d,i,k,l] = 2 * H[j,c]; idx[2] += [(a,b,d,i,k,l)]
       hs[2][a,b,c,i,k,l] = 2 * H[j,d]; idx[2] += [(a,b,c,i,k,l)]
       hs[2][b,c,d,i,j,l] = 2 * H[k,a]; idx[2] += [(b,c,d,i,j,l)]
       hs[2][b,c,d,i,j,k] = 2 * H[l,a]; idx[2] += [(b,c,d,i,j,k)]
       hs[2][a,c,d,i,j,l] = 2 * H[k,b]; idx[2] += [(a,c,d,i,j,l)]
       hs[2][a,c,d,i,j,k] = 2 * H[l,b]; idx[2] += [(a,c,d,i,j,k)]
    return FermionicOperatorNBody(hs),idx

# =====

def triple_commutator_adj_twobody_nor(n,Emu,Enu,H):
    hs  = [None]*4
    idx = [None]*4
    if(len(Emu)==2 and len(Enu)==2):
       hs[1]  = np.zeros(tuple([n]*4))
       idx[1] = []
       a,i = Emu
       b,j = Enu
       hs[1][i,:,j,:] =  2 * H[a,:,b,:];              idx[1] += [(i,x,j,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[1][i,:,j,:] =  2 * H[a,:,:,b];              idx[1] += [(i,x,j,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[1][b,:,:,:] = -1 * H[a,:,:,:] * delta(j,i); idx[1] += [(b,x,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[1][b,i,:,:] = -2 * H[a,j,:,:];              idx[1] += [(b,i,x,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[1][i,:,j,:] =  2 * H[:,a,b,:];              idx[1] += [(i,x,j,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[1][i,:,j,:] =  2 * H[:,a,:,b];              idx[1] += [(i,x,j,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[1][b,:,:,:] = -1 * H[:,a,:,:] * delta(j,i); idx[1] += [(b,x,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[1][b,i,:,:] = -2 * H[j,a,:,:];              idx[1] += [(b,i,x,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[1][:,:,j,:] = -1 * H[:,:,i,:] * delta(a,b); idx[1] += [(x,y,j,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[1][:,:,a,j] = -2 * H[:,:,i,b];              idx[1] += [(x,y,a,j) for x,y   in itertools.product(range(n),repeat=2)]
       hs[1][b,:,a,:] =  2 * H[j,:,i,:];              idx[1] += [(b,x,a,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[1][b,:,a,:] =  2 * H[:,j,i,:];              idx[1] += [(b,x,a,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[1][:,:,j,:] = -1 * H[:,:,:,i] * delta(a,b); idx[1] += [(x,y,j,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[1][:,:,a,j] = -2 * H[:,:,b,i];              idx[1] += [(x,y,a,j) for x,y   in itertools.product(range(n),repeat=2)]
       hs[1][b,:,a,:] =  2 * H[j,:,:,i];              idx[1] += [(b,x,a,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[1][b,:,a,:] =  2 * H[:,j,:,i];              idx[1] += [(b,x,a,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[1][:,:,a,:] = -1 * H[:,:,b,:] * delta(j,i); idx[1] += [(x,y,a,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[1][:,:,a,:] = -1 * H[:,:,:,b] * delta(j,i); idx[1] += [(x,y,a,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[1][i,:,:,:] = -1 * H[j,:,:,:] * delta(a,b); idx[1] += [(i,x,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[1][i,:,:,:] = -1 * H[:,j,:,:] * delta(a,b); idx[1] += [(i,x,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
    if(len(Emu)==2 and len(Enu)==4):
       hs[2]   = np.zeros(tuple([n]*6))
       idx[2]  = []
       a,i     = Emu
       b,c,j,k = Enu
       hs[2][i,j,:,k,:,:] =  1 * H[b,:,:,:] * delta(a,c) ; idx[2] += [(i,j,x,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][i,j,:,a,k,:] =  2 * H[b,:,c,:] ;              idx[2] += [(i,j,x,a,k,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][i,j,:,a,k,:] =  2 * H[b,:,:,c] ;              idx[2] += [(i,j,x,a,k,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][c,j,:,a,:,:] = -1 * H[b,:,:,:] * delta(k,i) ; idx[2] += [(c,j,x,a,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][c,i,:,a,:,:] = -1 * H[b,:,:,:] * delta(k,j) ; idx[2] += [(c,i,x,a,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][c,i,j,a,:,:] = -2 * H[b,k,:,:] ;              idx[2] += [(c,i,j,a,x,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][i,j,:,k,:,:] =  1 * H[:,b,:,:] * delta(a,c) ; idx[2] += [(i,j,x,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][i,j,:,a,k,:] =  2 * H[:,b,c,:] ;              idx[2] += [(i,j,x,a,k,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][i,j,:,a,k,:] =  2 * H[:,b,:,c] ;              idx[2] += [(i,j,x,a,k,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][c,j,:,a,:,:] = -1 * H[:,b,:,:] * delta(k,i) ; idx[2] += [(c,j,x,a,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][c,i,:,a,:,:] = -1 * H[:,b,:,:] * delta(k,j) ; idx[2] += [(c,i,x,a,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][c,i,j,a,:,:] = -2 * H[k,b,:,:] ;              idx[2] += [(c,i,j,a,x,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][i,j,:,k,:,:] =  1 * H[a,:,:,:] * delta(b,c) ; idx[2] += [(i,j,x,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][i,j,:,b,k,:] =  2 * H[a,:,c,:] ;              idx[2] += [(i,j,x,b,k,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][i,j,:,b,k,:] =  2 * H[a,:,:,c] ;              idx[2] += [(i,j,x,b,k,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][c,j,:,b,:,:] = -1 * H[a,:,:,:] * delta(k,i) ; idx[2] += [(c,j,x,b,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][c,i,:,b,:,:] = -1 * H[a,:,:,:] * delta(k,j) ; idx[2] += [(c,i,x,b,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][c,i,j,b,:,:] = -2 * H[a,k,:,:] ;              idx[2] += [(c,i,j,b,x,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][i,j,:,k,:,:] =  1 * H[:,a,:,:] * delta(b,c) ; idx[2] += [(i,j,x,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][i,j,:,b,k,:] =  2 * H[:,a,c,:] ;              idx[2] += [(i,j,x,b,k,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][i,j,:,b,k,:] =  2 * H[:,a,:,c] ;              idx[2] += [(i,j,x,b,k,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][c,j,:,b,:,:] = -1 * H[:,a,:,:] * delta(k,i) ; idx[2] += [(c,j,x,b,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][c,i,:,b,:,:] = -1 * H[:,a,:,:] * delta(k,j) ; idx[2] += [(c,i,x,b,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][c,i,j,b,:,:] = -2 * H[k,a,:,:] ;              idx[2] += [(c,i,j,b,x,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][i,:,:,b,k,:] = -1 * H[:,:,j,:] * delta(a,c) ; idx[2] += [(i,x,y,b,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][i,:,:,a,k,:] = -1 * H[:,:,j,:] * delta(b,c) ; idx[2] += [(i,x,y,a,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][i,:,:,a,b,k] = -2 * H[:,:,j,c] ;              idx[2] += [(i,x,y,a,b,k) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][c,:,:,a,b,:] =  1 * H[:,:,j,:] * delta(k,i) ; idx[2] += [(c,x,y,a,b,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][c,i,:,a,b,:] =  2 * H[k,:,j,:] ;              idx[2] += [(c,i,x,a,b,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][c,i,:,a,b,:] =  2 * H[:,k,j,:] ;              idx[2] += [(c,i,x,a,b,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][j,:,:,b,k,:] = -1 * H[:,:,i,:] * delta(a,c) ; idx[2] += [(j,x,y,b,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][j,:,:,a,k,:] = -1 * H[:,:,i,:] * delta(b,c) ; idx[2] += [(j,x,y,a,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][j,:,:,a,b,k] = -2 * H[:,:,i,c] ;              idx[2] += [(j,x,y,a,b,k) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][c,:,:,a,b,:] =  1 * H[:,:,i,:] * delta(k,j) ; idx[2] += [(c,x,y,a,b,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][c,j,:,a,b,:] =  2 * H[k,:,i,:] ;              idx[2] += [(c,j,x,a,b,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][c,j,:,a,b,:] =  2 * H[:,k,i,:] ;              idx[2] += [(c,j,x,a,b,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][i,:,:,b,k,:] = -1 * H[:,:,:,j] * delta(a,c) ; idx[2] += [(i,x,y,b,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][i,:,:,a,k,:] = -1 * H[:,:,:,j] * delta(b,c) ; idx[2] += [(i,x,y,a,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][i,:,:,a,b,k] = -2 * H[:,:,c,j] ;              idx[2] += [(i,x,y,a,b,k) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][c,:,:,a,b,:] =  1 * H[:,:,:,j] * delta(k,i) ; idx[2] += [(c,x,y,a,b,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][c,i,:,a,b,:] =  2 * H[k,:,:,j] ;              idx[2] += [(c,i,x,a,b,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][c,i,:,a,b,:] =  2 * H[:,k,:,j] ;              idx[2] += [(c,i,x,a,b,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][j,:,:,b,k,:] = -1 * H[:,:,:,i] * delta(a,c) ; idx[2] += [(j,x,y,b,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][j,:,:,a,k,:] = -1 * H[:,:,:,i] * delta(b,c) ; idx[2] += [(j,x,y,a,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][j,:,:,a,b,k] = -2 * H[:,:,c,i] ;              idx[2] += [(j,x,y,a,b,k) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][c,:,:,a,b,:] =  1 * H[:,:,:,i] * delta(k,j) ; idx[2] += [(c,x,y,a,b,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][c,j,:,a,b,:] =  2 * H[k,:,:,i] ;              idx[2] += [(c,j,x,a,b,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][c,j,:,a,b,:] =  2 * H[:,k,:,i] ;              idx[2] += [(c,j,x,a,b,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[2][i,:,:,a,b,:] = -1 * H[:,:,c,:] * delta(k,j) ; idx[2] += [(i,x,y,a,b,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][j,:,:,a,b,:] = -1 * H[:,:,c,:] * delta(k,i) ; idx[2] += [(j,x,y,a,b,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][i,:,:,a,b,:] = -1 * H[:,:,:,c] * delta(k,j) ; idx[2] += [(i,x,y,a,b,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][j,:,:,a,b,:] = -1 * H[:,:,:,c] * delta(k,i) ; idx[2] += [(j,x,y,a,b,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][i,j,:,a,:,:] = -1 * H[k,:,:,:] * delta(b,c) ; idx[2] += [(i,j,x,a,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][i,j,:,b,:,:] = -1 * H[k,:,:,:] * delta(a,c) ; idx[2] += [(i,j,x,b,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][i,j,:,a,:,:] = -1 * H[:,k,:,:] * delta(b,c) ; idx[2] += [(i,j,x,a,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[2][i,j,:,b,:,:] = -1 * H[:,k,:,:] * delta(a,c) ; idx[2] += [(i,j,x,b,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
    if(len(Emu)==4 and len(Enu)==4):
       hs[3]   = np.zeros(tuple([n]*8))
       idx[3]  = []
       a,b,j,i = Emu
       c,d,k,l = Enu
       hs[3][d,i,j,:,k,l,:,:] =  1 * H[b,:,:,:] * delta(a,c) ; idx[3] += [(d,i,j,x,k,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,j,:,k,l,:,:] =  1 * H[b,:,:,:] * delta(a,d) ; idx[3] += [(c,i,j,x,k,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,j,:,a,k,l,:] =  2 * H[b,:,c,:] ;              idx[3] += [(d,i,j,x,a,k,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,i,j,:,a,k,l,:] =  2 * H[b,:,d,:] ;              idx[3] += [(c,i,j,x,a,k,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][d,i,j,:,a,k,l,:] =  2 * H[b,:,:,c] ;              idx[3] += [(d,i,j,x,a,k,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,i,j,:,a,k,l,:] =  2 * H[b,:,:,d] ;              idx[3] += [(c,i,j,x,a,k,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,j,:,a,l,:,:] = -1 * H[b,:,:,:] * delta(k,i) ; idx[3] += [(c,d,j,x,a,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,:,a,l,:,:] = -1 * H[b,:,:,:] * delta(k,j) ; idx[3] += [(c,d,i,x,a,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,j,a,l,:,:] = -2 * H[b,k,:,:] ;              idx[3] += [(c,d,i,j,a,l,x,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,j,:,a,k,:,:] = -1 * H[b,:,:,:] * delta(l,i) ; idx[3] += [(c,d,j,x,a,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,:,a,k,:,:] = -1 * H[b,:,:,:] * delta(l,j) ; idx[3] += [(c,d,i,x,a,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,j,a,k,:,:] = -2 * H[b,l,:,:] ;              idx[3] += [(c,d,i,j,a,k,x,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][d,i,j,:,k,l,:,:] =  1 * H[:,b,:,:] * delta(a,c) ; idx[3] += [(d,i,j,x,k,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,j,:,k,l,:,:] =  1 * H[:,b,:,:] * delta(a,d) ; idx[3] += [(c,i,j,x,k,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,j,:,a,k,l,:] =  2 * H[:,b,c,:] ;              idx[3] += [(d,i,j,x,a,k,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,i,j,:,a,k,l,:] =  2 * H[:,b,d,:] ;              idx[3] += [(c,i,j,x,a,k,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][d,i,j,:,a,k,l,:] =  2 * H[:,b,:,c] ;              idx[3] += [(d,i,j,x,a,k,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,i,j,:,a,k,l,:] =  2 * H[:,b,:,d] ;              idx[3] += [(c,i,j,x,a,k,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,j,:,a,l,:,:] = -1 * H[:,b,:,:] * delta(k,i) ; idx[3] += [(c,d,j,x,a,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,:,a,l,:,:] = -1 * H[:,b,:,:] * delta(k,j) ; idx[3] += [(c,d,i,x,a,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,j,a,l,:,:] = -2 * H[k,b,:,:] ;              idx[3] += [(c,d,i,j,a,l,x,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,j,:,a,k,:,:] = -1 * H[:,b,:,:] * delta(l,i) ; idx[3] += [(c,d,j,x,a,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,:,a,k,:,:] = -1 * H[:,b,:,:] * delta(l,j) ; idx[3] += [(c,d,i,x,a,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,j,a,k,:,:] = -2 * H[l,b,:,:] ;              idx[3] += [(c,d,i,j,a,k,x,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][d,i,j,:,k,l,:,:] =  1 * H[a,:,:,:] * delta(b,c) ; idx[3] += [(d,i,j,x,k,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,j,:,k,l,:,:] =  1 * H[a,:,:,:] * delta(b,d) ; idx[3] += [(c,i,j,x,k,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,j,:,b,k,l,:] =  2 * H[a,:,c,:] ;              idx[3] += [(d,i,j,x,b,k,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,i,j,:,b,k,l,:] =  2 * H[a,:,d,:] ;              idx[3] += [(c,i,j,x,b,k,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][d,i,j,:,b,k,l,:] =  2 * H[a,:,:,c] ;              idx[3] += [(d,i,j,x,b,k,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,i,j,:,b,k,l,:] =  2 * H[a,:,:,d] ;              idx[3] += [(c,i,j,x,b,k,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,j,:,b,l,:,:] = -1 * H[a,:,:,:] * delta(k,i) ; idx[3] += [(c,d,j,x,b,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,:,b,l,:,:] = -1 * H[a,:,:,:] * delta(k,j) ; idx[3] += [(c,d,i,x,b,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,j,b,l,:,:] = -2 * H[a,k,:,:] ;              idx[3] += [(c,d,i,j,b,l,x,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,j,:,b,k,:,:] = -1 * H[a,:,:,:] * delta(l,i) ; idx[3] += [(c,d,j,x,b,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,:,b,k,:,:] = -1 * H[a,:,:,:] * delta(l,j) ; idx[3] += [(c,d,i,x,b,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,j,b,k,:,:] = -2 * H[a,l,:,:] ;              idx[3] += [(c,d,i,j,b,k,x,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][d,i,j,:,k,l,:,:] =  1 * H[:,a,:,:] * delta(b,c) ; idx[3] += [(d,i,j,x,k,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,j,:,k,l,:,:] =  1 * H[:,a,:,:] * delta(b,d) ; idx[3] += [(c,i,j,x,k,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,j,:,b,k,l,:] =  2 * H[:,a,c,:] ;              idx[3] += [(d,i,j,x,b,k,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,i,j,:,b,k,l,:] =  2 * H[:,a,d,:] ;              idx[3] += [(c,i,j,x,b,k,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][d,i,j,:,b,k,l,:] =  2 * H[:,a,:,c] ;              idx[3] += [(d,i,j,x,b,k,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,i,j,:,b,k,l,:] =  2 * H[:,a,:,d] ;              idx[3] += [(c,i,j,x,b,k,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,j,:,b,l,:,:] = -1 * H[:,a,:,:] * delta(k,i) ; idx[3] += [(c,d,j,x,b,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,:,b,l,:,:] = -1 * H[:,a,:,:] * delta(k,j) ; idx[3] += [(c,d,i,x,b,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,j,b,l,:,:] = -2 * H[k,a,:,:] ;              idx[3] += [(c,d,i,j,b,l,x,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,j,:,b,k,:,:] = -1 * H[:,a,:,:] * delta(l,i) ; idx[3] += [(c,d,j,x,b,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,:,b,k,:,:] = -1 * H[:,a,:,:] * delta(l,j) ; idx[3] += [(c,d,i,x,b,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,j,b,k,:,:] = -2 * H[l,a,:,:] ;              idx[3] += [(c,d,i,j,b,k,x,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][d,i,:,:,b,k,l,:] = -1 * H[:,:,j,:] * delta(a,c) ; idx[3] += [(d,i,x,y,b,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,:,:,b,k,l,:] = -1 * H[:,:,j,:] * delta(a,d) ; idx[3] += [(c,i,x,y,b,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,:,:,a,k,l,:] = -1 * H[:,:,j,:] * delta(b,c) ; idx[3] += [(d,i,x,y,a,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,:,:,a,k,l,:] = -1 * H[:,:,j,:] * delta(b,d) ; idx[3] += [(c,i,x,y,a,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,:,:,a,b,k,l] = -2 * H[:,:,j,c] ;              idx[3] += [(d,i,x,y,a,b,k,l) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,i,:,:,a,b,k,l] = -2 * H[:,:,j,d] ;              idx[3] += [(c,i,x,y,a,b,k,l) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,:,:,a,b,l,:] =  1 * H[:,:,j,:] * delta(k,i) ; idx[3] += [(c,d,x,y,a,b,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,:,a,b,l,:] =  2 * H[k,:,j,:] ;              idx[3] += [(c,d,i,x,a,b,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,i,:,a,b,l,:] =  2 * H[:,k,j,:] ;              idx[3] += [(c,d,i,x,a,b,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,:,:,a,b,k,:] =  1 * H[:,:,j,:] * delta(l,i) ; idx[3] += [(c,d,x,y,a,b,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,:,a,b,k,:] =  2 * H[l,:,j,:] ;              idx[3] += [(c,d,i,x,a,b,k,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,i,:,a,b,k,:] =  2 * H[:,l,j,:] ;              idx[3] += [(c,d,i,x,a,b,k,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][d,j,:,:,b,k,l,:] = -1 * H[:,:,i,:] * delta(a,c) ; idx[3] += [(d,j,x,y,b,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,j,:,:,b,k,l,:] = -1 * H[:,:,i,:] * delta(a,d) ; idx[3] += [(c,j,x,y,b,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,j,:,:,a,k,l,:] = -1 * H[:,:,i,:] * delta(b,c) ; idx[3] += [(d,j,x,y,a,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,j,:,:,a,k,l,:] = -1 * H[:,:,i,:] * delta(b,d) ; idx[3] += [(c,j,x,y,a,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,j,:,:,a,b,k,l] = -2 * H[:,:,i,c] ;              idx[3] += [(d,j,x,y,a,b,k,l) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,j,:,:,a,b,k,l] = -2 * H[:,:,i,d] ;              idx[3] += [(c,j,x,y,a,b,k,l) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,:,:,a,b,l,:] =  1 * H[:,:,i,:] * delta(k,j) ; idx[3] += [(c,d,x,y,a,b,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,j,:,a,b,l,:] =  2 * H[k,:,i,:] ;              idx[3] += [(c,d,j,x,a,b,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,j,:,a,b,l,:] =  2 * H[:,k,i,:] ;              idx[3] += [(c,d,j,x,a,b,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,:,:,a,b,k,:] =  1 * H[:,:,i,:] * delta(l,j) ; idx[3] += [(c,d,x,y,a,b,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,j,:,a,b,k,:] =  2 * H[l,:,i,:] ;              idx[3] += [(c,d,j,x,a,b,k,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,j,:,a,b,k,:] =  2 * H[:,l,i,:] ;              idx[3] += [(c,d,j,x,a,b,k,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][d,i,:,:,b,k,l,:] = -1 * H[:,:,:,j] * delta(a,c) ; idx[3] += [(d,i,x,y,b,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,:,:,b,k,l,:] = -1 * H[:,:,:,j] * delta(a,d) ; idx[3] += [(c,i,x,y,b,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,:,:,a,k,l,:] = -1 * H[:,:,:,j] * delta(b,c) ; idx[3] += [(d,i,x,y,a,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,:,:,a,k,l,:] = -1 * H[:,:,:,j] * delta(b,d) ; idx[3] += [(c,i,x,y,a,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,:,:,a,b,k,l] = -2 * H[:,:,c,j] ;              idx[3] += [(d,i,x,y,a,b,k,l) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,i,:,:,a,b,k,l] = -2 * H[:,:,d,j] ;              idx[3] += [(c,i,x,y,a,b,k,l) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,:,:,a,b,l,:] =  1 * H[:,:,:,j] * delta(k,i) ; idx[3] += [(c,d,x,y,a,b,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,:,a,b,l,:] =  2 * H[k,:,:,j] ;              idx[3] += [(c,d,i,x,a,b,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,i,:,a,b,l,:] =  2 * H[:,k,:,j] ;              idx[3] += [(c,d,i,x,a,b,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,:,:,a,b,k,:] =  1 * H[:,:,:,j] * delta(l,i) ; idx[3] += [(c,d,x,y,a,b,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,:,a,b,k,:] =  2 * H[l,:,:,j] ;              idx[3] += [(c,d,i,x,a,b,k,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,i,:,a,b,k,:] =  2 * H[:,l,:,j] ;              idx[3] += [(c,d,i,x,a,b,k,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][d,j,:,:,b,k,l,:] = -1 * H[:,:,:,i] * delta(a,c) ; idx[3] += [(d,j,x,y,b,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,j,:,:,b,k,l,:] = -1 * H[:,:,:,i] * delta(a,d) ; idx[3] += [(c,j,x,y,b,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,j,:,:,a,k,l,:] = -1 * H[:,:,:,i] * delta(b,c) ; idx[3] += [(d,j,x,y,a,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,j,:,:,a,k,l,:] = -1 * H[:,:,:,i] * delta(b,d) ; idx[3] += [(c,j,x,y,a,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,j,:,:,a,b,k,l] = -2 * H[:,:,c,i] ;              idx[3] += [(d,j,x,y,a,b,k,l) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,j,:,:,a,b,k,l] = -2 * H[:,:,d,i] ;              idx[3] += [(c,j,x,y,a,b,k,l) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,:,:,a,b,l,:] =  1 * H[:,:,:,i] * delta(k,j) ; idx[3] += [(c,d,x,y,a,b,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,j,:,a,b,l,:] =  2 * H[k,:,:,i] ;              idx[3] += [(c,d,j,x,a,b,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,j,:,a,b,l,:] =  2 * H[:,k,:,i] ;              idx[3] += [(c,d,j,x,a,b,l,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,:,:,a,b,k,:] =  1 * H[:,:,:,i] * delta(l,j) ; idx[3] += [(c,d,x,y,a,b,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,j,:,a,b,k,:] =  2 * H[l,:,:,i] ;              idx[3] += [(c,d,j,x,a,b,k,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][c,d,j,:,a,b,k,:] =  2 * H[:,l,:,i] ;              idx[3] += [(c,d,j,x,a,b,k,y) for x,y   in itertools.product(range(n),repeat=2)]
       hs[3][i,j,:,:,a,k,l,:] =  1 * H[:,:,c,:] * delta(b,d) ; idx[3] += [(i,j,x,y,a,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][i,j,:,:,b,k,l,:] =  1 * H[:,:,c,:] * delta(a,d) ; idx[3] += [(i,j,x,y,b,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,:,:,a,b,l,:] = -1 * H[:,:,c,:] * delta(k,j) ; idx[3] += [(d,i,x,y,a,b,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,j,:,:,a,b,l,:] = -1 * H[:,:,c,:] * delta(k,i) ; idx[3] += [(d,j,x,y,a,b,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,:,:,a,b,k,:] = -1 * H[:,:,c,:] * delta(l,j) ; idx[3] += [(d,i,x,y,a,b,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,j,:,:,a,b,k,:] = -1 * H[:,:,c,:] * delta(l,i) ; idx[3] += [(d,j,x,y,a,b,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][i,j,:,:,a,k,l,:] =  1 * H[:,:,d,:] * delta(b,c) ; idx[3] += [(i,j,x,y,a,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][i,j,:,:,b,k,l,:] =  1 * H[:,:,d,:] * delta(a,c) ; idx[3] += [(i,j,x,y,b,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,:,:,a,b,l,:] = -1 * H[:,:,d,:] * delta(k,j) ; idx[3] += [(c,i,x,y,a,b,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,j,:,:,a,b,l,:] = -1 * H[:,:,d,:] * delta(k,i) ; idx[3] += [(c,j,x,y,a,b,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,:,:,a,b,k,:] = -1 * H[:,:,d,:] * delta(l,j) ; idx[3] += [(c,i,x,y,a,b,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,j,:,:,a,b,k,:] = -1 * H[:,:,d,:] * delta(l,i) ; idx[3] += [(c,j,x,y,a,b,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][i,j,:,:,a,k,l,:] =  1 * H[:,:,:,c] * delta(b,d) ; idx[3] += [(i,j,x,y,a,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][i,j,:,:,b,k,l,:] =  1 * H[:,:,:,c] * delta(a,d) ; idx[3] += [(i,j,x,y,b,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,:,:,a,b,l,:] = -1 * H[:,:,:,c] * delta(k,j) ; idx[3] += [(d,i,x,y,a,b,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,j,:,:,a,b,l,:] = -1 * H[:,:,:,c] * delta(k,i) ; idx[3] += [(d,j,x,y,a,b,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,:,:,a,b,k,:] = -1 * H[:,:,:,c] * delta(l,j) ; idx[3] += [(d,i,x,y,a,b,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,j,:,:,a,b,k,:] = -1 * H[:,:,:,c] * delta(l,i) ; idx[3] += [(d,j,x,y,a,b,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][i,j,:,:,a,k,l,:] =  1 * H[:,:,:,d] * delta(b,c) ; idx[3] += [(i,j,x,y,a,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][i,j,:,:,b,k,l,:] =  1 * H[:,:,:,d] * delta(a,c) ; idx[3] += [(i,j,x,y,b,k,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,:,:,a,b,l,:] = -1 * H[:,:,:,d] * delta(k,j) ; idx[3] += [(c,i,x,y,a,b,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,j,:,:,a,b,l,:] = -1 * H[:,:,:,d] * delta(k,i) ; idx[3] += [(c,j,x,y,a,b,l,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,:,:,a,b,k,:] = -1 * H[:,:,:,d] * delta(l,j) ; idx[3] += [(c,i,x,y,a,b,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,j,:,:,a,b,k,:] = -1 * H[:,:,:,d] * delta(l,i) ; idx[3] += [(c,j,x,y,a,b,k,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,j,:,a,l,:,:] = -1 * H[k,:,:,:] * delta(b,c) ; idx[3] += [(d,i,j,x,a,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,j,:,a,l,:,:] = -1 * H[k,:,:,:] * delta(b,d) ; idx[3] += [(c,i,j,x,a,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,j,:,b,l,:,:] = -1 * H[k,:,:,:] * delta(a,c) ; idx[3] += [(d,i,j,x,b,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,j,:,b,l,:,:] = -1 * H[k,:,:,:] * delta(a,d) ; idx[3] += [(c,i,j,x,b,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,:,a,b,:,:] =  1 * H[k,:,:,:] * delta(l,j) ; idx[3] += [(c,d,i,x,a,b,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,j,:,a,b,:,:] =  1 * H[k,:,:,:] * delta(l,i) ; idx[3] += [(c,d,j,x,a,b,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,j,:,a,l,:,:] = -1 * H[:,k,:,:] * delta(b,c) ; idx[3] += [(d,i,j,x,a,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,j,:,a,l,:,:] = -1 * H[:,k,:,:] * delta(b,d) ; idx[3] += [(c,i,j,x,a,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,j,:,b,l,:,:] = -1 * H[:,k,:,:] * delta(a,c) ; idx[3] += [(d,i,j,x,b,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,j,:,b,l,:,:] = -1 * H[:,k,:,:] * delta(a,d) ; idx[3] += [(c,i,j,x,b,l,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,:,a,b,:,:] =  1 * H[:,k,:,:] * delta(l,j) ; idx[3] += [(c,d,i,x,a,b,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,j,:,a,b,:,:] =  1 * H[:,k,:,:] * delta(l,i) ; idx[3] += [(c,d,j,x,a,b,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,j,:,a,k,:,:] = -1 * H[l,:,:,:] * delta(b,c) ; idx[3] += [(d,i,j,x,a,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,j,:,a,k,:,:] = -1 * H[l,:,:,:] * delta(b,d) ; idx[3] += [(c,i,j,x,a,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,j,:,b,k,:,:] = -1 * H[l,:,:,:] * delta(a,c) ; idx[3] += [(d,i,j,x,b,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,j,:,b,k,:,:] = -1 * H[l,:,:,:] * delta(a,d) ; idx[3] += [(c,i,j,x,b,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,:,a,b,:,:] =  1 * H[l,:,:,:] * delta(k,j) ; idx[3] += [(c,d,i,x,a,b,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,j,:,a,b,:,:] =  1 * H[l,:,:,:] * delta(k,i) ; idx[3] += [(c,d,j,x,a,b,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,j,:,a,k,:,:] = -1 * H[:,l,:,:] * delta(b,c) ; idx[3] += [(d,i,j,x,a,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,j,:,a,k,:,:] = -1 * H[:,l,:,:] * delta(b,d) ; idx[3] += [(c,i,j,x,a,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][d,i,j,:,b,k,:,:] = -1 * H[:,l,:,:] * delta(a,c) ; idx[3] += [(d,i,j,x,b,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,i,j,:,b,k,:,:] = -1 * H[:,l,:,:] * delta(a,d) ; idx[3] += [(c,i,j,x,b,k,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,i,:,a,b,:,:] =  1 * H[:,l,:,:] * delta(k,j) ; idx[3] += [(c,d,i,x,a,b,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
       hs[3][c,d,j,:,a,b,:,:] =  1 * H[:,l,:,:] * delta(k,i) ; idx[3] += [(c,d,j,x,a,b,y,z) for x,y,z in itertools.product(range(n),repeat=3)]
    return FermionicOperatorNBody(hs),idx


def triple_commutator_adj_twobody_adj(n,Emu,Enu,H):
    hs  = [None]*4
    idx = [None]*4
    if(len(Emu)==2 and len(Enu)==2):
       hs[1]  = np.zeros(tuple([n]*4))
       idx[1] = []
       a,i = Emu
       b,j = Enu
       hs[1][i,:,b,:] =  2 * H[a,:,j,:]; idx[1] += [(i,x,b,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[1][i,:,b,:] =  2 * H[a,:,:,j]; idx[1] += [(i,x,b,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[1][i,j,:,:] = -2 * H[a,b,:,:]; idx[1] += [(i,j,x,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[1][i,:,b,:] =  2 * H[:,a,j,:]; idx[1] += [(i,x,b,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[1][i,:,b,:] =  2 * H[:,a,:,j]; idx[1] += [(i,x,b,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[1][i,j,:,:] = -2 * H[b,a,:,:]; idx[1] += [(i,j,x,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[1][:,:,a,b] = -2 * H[:,:,i,j]; idx[1] += [(x,y,a,b) for x,y in itertools.product(range(n),repeat=2)]
       hs[1][j,:,a,:] =  2 * H[b,:,i,:]; idx[1] += [(j,x,a,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[1][j,:,a,:] =  2 * H[:,b,i,:]; idx[1] += [(j,x,a,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[1][:,:,a,b] = -2 * H[:,:,j,i]; idx[1] += [(x,y,a,b) for x,y in itertools.product(range(n),repeat=2)]
       hs[1][j,:,a,:] =  2 * H[b,:,:,i]; idx[1] += [(j,x,a,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[1][j,:,a,:] =  2 * H[:,b,:,i]; idx[1] += [(j,x,a,y) for x,y in itertools.product(range(n),repeat=2)]
    if(len(Emu)==2 and len(Enu)==4):
       hs[2]   = np.zeros(tuple([n]*6))
       idx[2]  = []
       a,i     = Emu
       b,c,j,k = Enu
       hs[2][i,j,:,a,c,:] =  2 * H[b,:,k,:] ; idx[2] += [(i,j,x,a,c,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][i,j,:,a,c,:] =  2 * H[b,:,:,k] ; idx[2] += [(i,j,x,a,c,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][i,j,k,a,:,:] = -2 * H[b,c,:,:] ; idx[2] += [(i,j,k,a,x,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][i,j,:,a,c,:] =  2 * H[:,b,k,:] ; idx[2] += [(i,j,x,a,c,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][i,j,:,a,c,:] =  2 * H[:,b,:,k] ; idx[2] += [(i,j,x,a,c,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][i,j,k,a,:,:] = -2 * H[c,b,:,:] ; idx[2] += [(i,j,k,a,x,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][i,j,:,b,c,:] =  2 * H[a,:,k,:] ; idx[2] += [(i,j,x,b,c,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][i,j,:,b,c,:] =  2 * H[a,:,:,k] ; idx[2] += [(i,j,x,b,c,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][i,j,k,b,:,:] = -2 * H[a,c,:,:] ; idx[2] += [(i,j,k,b,x,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][i,j,:,b,c,:] =  2 * H[:,a,k,:] ; idx[2] += [(i,j,x,b,c,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][i,j,:,b,c,:] =  2 * H[:,a,:,k] ; idx[2] += [(i,j,x,b,c,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][i,j,k,b,:,:] = -2 * H[c,a,:,:] ; idx[2] += [(i,j,k,b,x,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][i,:,:,a,b,c] = -2 * H[:,:,j,k] ; idx[2] += [(i,x,y,a,b,c) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][i,k,:,a,b,:] =  2 * H[c,:,j,:] ; idx[2] += [(i,k,x,a,b,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][i,k,:,a,b,:] =  2 * H[:,c,j,:] ; idx[2] += [(i,k,x,a,b,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][j,:,:,a,b,c] = -2 * H[:,:,i,k] ; idx[2] += [(j,x,y,a,b,c) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][j,k,:,a,b,:] =  2 * H[c,:,i,:] ; idx[2] += [(j,k,x,a,b,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][j,k,:,a,b,:] =  2 * H[:,c,i,:] ; idx[2] += [(j,k,x,a,b,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][i,:,:,a,b,c] = -2 * H[:,:,k,j] ; idx[2] += [(i,x,y,a,b,c) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][i,k,:,a,b,:] =  2 * H[c,:,:,j] ; idx[2] += [(i,k,x,a,b,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][i,k,:,a,b,:] =  2 * H[:,c,:,j] ; idx[2] += [(i,k,x,a,b,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][j,:,:,a,b,c] = -2 * H[:,:,k,i] ; idx[2] += [(j,x,y,a,b,c) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][j,k,:,a,b,:] =  2 * H[c,:,:,i] ; idx[2] += [(j,k,x,a,b,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[2][j,k,:,a,b,:] =  2 * H[:,c,:,i] ; idx[2] += [(j,k,x,a,b,y) for x,y in itertools.product(range(n),repeat=2)]
    if(len(Emu)==4 and len(Enu)==4):
       hs[3]   = np.zeros(tuple([n]*8))
       idx[3]  = []
       a,b,j,i = Emu
       c,d,k,l = Enu
       hs[3][i,j,k,:,a,c,d,:] =  2 * H[b,:,l,:] ; idx[3] += [(i,j,k,x,a,c,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,l,:,a,c,d,:] =  2 * H[b,:,k,:] ; idx[3] += [(i,j,l,x,a,c,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,k,:,a,c,d,:] =  2 * H[b,:,:,l] ; idx[3] += [(i,j,k,x,a,c,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,l,:,a,c,d,:] =  2 * H[b,:,:,k] ; idx[3] += [(i,j,l,x,a,c,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,k,l,a,c,:,:] = -2 * H[b,d,:,:] ; idx[3] += [(i,j,k,l,a,c,x,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,k,l,a,d,:,:] = -2 * H[b,c,:,:] ; idx[3] += [(i,j,k,l,a,d,x,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,k,:,a,c,d,:] =  2 * H[:,b,l,:] ; idx[3] += [(i,j,k,x,a,c,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,l,:,a,c,d,:] =  2 * H[:,b,k,:] ; idx[3] += [(i,j,l,x,a,c,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,k,:,a,c,d,:] =  2 * H[:,b,:,l] ; idx[3] += [(i,j,k,x,a,c,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,l,:,a,c,d,:] =  2 * H[:,b,:,k] ; idx[3] += [(i,j,l,x,a,c,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,k,l,a,c,:,:] = -2 * H[d,b,:,:] ; idx[3] += [(i,j,k,l,a,c,x,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,k,l,a,d,:,:] = -2 * H[c,b,:,:] ; idx[3] += [(i,j,k,l,a,d,x,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,k,:,b,c,d,:] =  2 * H[a,:,l,:] ; idx[3] += [(i,j,k,x,b,c,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,l,:,b,c,d,:] =  2 * H[a,:,k,:] ; idx[3] += [(i,j,l,x,b,c,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,k,:,b,c,d,:] =  2 * H[a,:,:,l] ; idx[3] += [(i,j,k,x,b,c,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,l,:,b,c,d,:] =  2 * H[a,:,:,k] ; idx[3] += [(i,j,l,x,b,c,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,k,l,b,c,:,:] = -2 * H[a,d,:,:] ; idx[3] += [(i,j,k,l,b,c,x,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,k,l,b,d,:,:] = -2 * H[a,c,:,:] ; idx[3] += [(i,j,k,l,b,d,x,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,k,:,b,c,d,:] =  2 * H[:,a,l,:] ; idx[3] += [(i,j,k,x,b,c,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,l,:,b,c,d,:] =  2 * H[:,a,k,:] ; idx[3] += [(i,j,l,x,b,c,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,k,:,b,c,d,:] =  2 * H[:,a,:,l] ; idx[3] += [(i,j,k,x,b,c,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,l,:,b,c,d,:] =  2 * H[:,a,:,k] ; idx[3] += [(i,j,l,x,b,c,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,k,l,b,c,:,:] = -2 * H[d,a,:,:] ; idx[3] += [(i,j,k,l,b,c,x,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,j,k,l,b,d,:,:] = -2 * H[c,a,:,:] ; idx[3] += [(i,j,k,l,b,d,x,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,k,:,:,a,b,c,d] = -2 * H[:,:,j,l] ; idx[3] += [(i,k,x,y,a,b,c,d) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,l,:,:,a,b,c,d] = -2 * H[:,:,j,k] ; idx[3] += [(i,l,x,y,a,b,c,d) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,k,l,:,a,b,c,:] =  2 * H[d,:,j,:] ; idx[3] += [(i,k,l,x,a,b,c,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,k,l,:,a,b,c,:] =  2 * H[:,d,j,:] ; idx[3] += [(i,k,l,x,a,b,c,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,k,l,:,a,b,d,:] =  2 * H[c,:,j,:] ; idx[3] += [(i,k,l,x,a,b,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,k,l,:,a,b,d,:] =  2 * H[:,c,j,:] ; idx[3] += [(i,k,l,x,a,b,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][j,k,:,:,a,b,c,d] = -2 * H[:,:,i,l] ; idx[3] += [(j,k,x,y,a,b,c,d) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][j,l,:,:,a,b,c,d] = -2 * H[:,:,i,k] ; idx[3] += [(j,l,x,y,a,b,c,d) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][j,k,l,:,a,b,c,:] =  2 * H[d,:,i,:] ; idx[3] += [(j,k,l,x,a,b,c,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][j,k,l,:,a,b,c,:] =  2 * H[:,d,i,:] ; idx[3] += [(j,k,l,x,a,b,c,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][j,k,l,:,a,b,d,:] =  2 * H[c,:,i,:] ; idx[3] += [(j,k,l,x,a,b,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][j,k,l,:,a,b,d,:] =  2 * H[:,c,i,:] ; idx[3] += [(j,k,l,x,a,b,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,k,:,:,a,b,c,d] = -2 * H[:,:,l,j] ; idx[3] += [(i,k,x,y,a,b,c,d) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,l,:,:,a,b,c,d] = -2 * H[:,:,k,j] ; idx[3] += [(i,l,x,y,a,b,c,d) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,k,l,:,a,b,c,:] =  2 * H[d,:,:,j] ; idx[3] += [(i,k,l,x,a,b,c,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,k,l,:,a,b,c,:] =  2 * H[:,d,:,j] ; idx[3] += [(i,k,l,x,a,b,c,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,k,l,:,a,b,d,:] =  2 * H[c,:,:,j] ; idx[3] += [(i,k,l,x,a,b,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][i,k,l,:,a,b,d,:] =  2 * H[:,c,:,j] ; idx[3] += [(i,k,l,x,a,b,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][j,k,:,:,a,b,c,d] = -2 * H[:,:,l,i] ; idx[3] += [(j,k,x,y,a,b,c,d) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][j,l,:,:,a,b,c,d] = -2 * H[:,:,k,i] ; idx[3] += [(j,l,x,y,a,b,c,d) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][j,k,l,:,a,b,c,:] =  2 * H[d,:,:,i] ; idx[3] += [(j,k,l,x,a,b,c,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][j,k,l,:,a,b,c,:] =  2 * H[:,d,:,i] ; idx[3] += [(j,k,l,x,a,b,c,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][j,k,l,:,a,b,d,:] =  2 * H[c,:,:,i] ; idx[3] += [(j,k,l,x,a,b,d,y) for x,y in itertools.product(range(n),repeat=2)]
       hs[3][j,k,l,:,a,b,d,:] =  2 * H[:,c,:,i] ; idx[3] += [(j,k,l,x,a,b,d,y) for x,y in itertools.product(range(n),repeat=2)]
    return FermionicOperatorNBody(hs),idx


